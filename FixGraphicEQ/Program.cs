using System.Globalization;
using System.Runtime.InteropServices;
using FixGraphicEQ;

// App header
Console.WriteLine("""
                  FixGraphicEQ (C# Version) v1.1.0
                      Made by VictorPL
                      
                  This program will offset values in a GraphicEQ file generated by https:\\autoeq.app by a given amount.

                  Press ENTER to select an input file...
                  """);
Pause();

// Get input file path
var inputFilePath = ShowDialog();
if (inputFilePath == string.Empty) {
    Console.WriteLine("\nOperation cancelled. Press any key to exit...");
    Pause();
    return;
}

// Gets the offset value from the user
float offset;
do {
    Console.WriteLine("\nPlease input a valid gain offset value to be applied to the file (e.g. 12.2): ");
} while (!float.TryParse(Console.ReadLine(), CultureInfo.InvariantCulture, out offset));

// Creates the output file path
var outputFilePath = inputFilePath.Replace(".txt", $"_offset{offset}.txt".Replace(",", "."));

// List of frequencies and gains
List<FrequencyGain> frequenciesGains = new();

// Beginning of every GraphicEQ file
const string header = "GraphicEQ: ";

// Reads the file and adds the values to the list
try {
    foreach (var frequencyGain in File.ReadAllText(inputFilePath).Replace(header, "").Split("; ")) {
        FrequencyGain values = new(Convert.ToInt32(frequencyGain.Split(" ")[0]),
            Convert.ToSingle(frequencyGain.Split(" ")[1], CultureInfo.InvariantCulture));
        frequenciesGains.Add(values);
    }
}
catch (Exception e) {
    Console.WriteLine("\nError reading file: " + e.Message);
    throw;
}

// Creates a new string with the new values
var newValues = header;
foreach (var frequencyGain in frequenciesGains)
    newValues += $"{frequencyGain.Frequency} {Math.Round(frequencyGain.Gain + offset, 1)}; ".Replace(",", ".");

// Writes the new file
try {
    File.WriteAllText(outputFilePath, newValues.TrimEnd("; ".ToCharArray()));
    Console.WriteLine("\nFile written successfully: " + outputFilePath);
}
catch (Exception e) {
    Console.WriteLine("\nError writing file: " + e.Message);
}
finally {
    Console.WriteLine("\nPress any key to exit...");
    Pause();
}

return;

// Pauses the program until a key is pressed, probably a stupid way to do it without sending a system pause command
void Pause() {
    Console.ReadKey();
}

// I don't know what this does but according to StackOverflow, I need it to create an open file dialog
// Sources: https://stackoverflow.com/questions/68711769/how-to-make-a-openfile-dialog-box-in-console-application-net-core-c
//          https://www.pinvoke.net/default.aspx/comdlg32/GetOpenFileName.html
//          https://www.pinvoke.net/default.aspx/Structures/OPENFILENAME.html
[DllImport("comdlg32.dll", SetLastError = true, CharSet = CharSet.Auto)]
static extern bool GetOpenFileName(ref OpenFileName ofn);

// Shows an open file dialog and returns the path of the selected file, from the sources above
static string ShowDialog() {
    var ofn = new OpenFileName();
    ofn.lStructSize = Marshal.SizeOf(ofn);
    // Define Filter for your extensions (Excel, ...)
    ofn.lpstrFilter = "Plain Text Files (*.txt)\0*.txt\0All Files (*.*)\0*.*\0";
    ofn.lpstrFile = new string(new char[256]);
    ofn.nMaxFile = ofn.lpstrFile.Length;
    ofn.lpstrFileTitle = new string(new char[64]);
    ofn.nMaxFileTitle = ofn.lpstrFileTitle.Length;
    ofn.lpstrTitle = "Select input file";
    if (GetOpenFileName(ref ofn))
        return ofn.lpstrFile;
    return string.Empty;
}

// I also have no idea what this does but it's needed for the open file dialog, from the sources above
[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
public struct OpenFileName {
    public int lStructSize;
    private readonly IntPtr hwndOwner;
    private readonly IntPtr hInstance;
    public string lpstrFilter;
    private readonly string lpstrCustomFilter;
    private readonly int nMaxCustFilter;
    private readonly int nFilterIndex;
    public string lpstrFile;
    public int nMaxFile;
    public string lpstrFileTitle;
    public int nMaxFileTitle;
    private readonly string lpstrInitialDir;
    public string lpstrTitle;
    private readonly int Flags;
    private readonly short nFileOffset;
    private readonly short nFileExtension;
    private readonly string lpstrDefExt;
    private readonly IntPtr lCustData;
    private readonly IntPtr lpfnHook;
    private readonly string lpTemplateName;
    private readonly IntPtr pvReserved;
    private readonly int dwReserved;
    private readonly int flagsEx;
}